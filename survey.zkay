pragma zkay ^0.3.0;

contract Survey {
    enum Choice {
        none, a, b, c
    }

    final address organizer;

    // Votes of the individual users (current_votes[a] is only visible to a)
    mapping(address!x => Choice@x) current_votes;

    // Private vote counts allowing homomorphic operations (only visible to the organizer)
    uint32@organizer<+> a_count;
    uint32@organizer<+> b_count;
    uint32@organizer<+> c_count;

    // The minimum number of participants before the vote can be closed
    uint min_votes;

    // Total number of votes
    uint vote_count;

    // Published results (after vote is closed and result published by organizer)
    uint packed_results;

    constructor(uint _min_votes) public {
        require(_min_votes > 0);
        organizer = me;
        min_votes = _min_votes;
    }

    // State altering functions

    function vote(Choice@me votum) public {
        require(reveal(votum != Choice.none && current_votes[me] == Choice.none, all));
        require(!is_result_published());
        current_votes[me] = votum;
        vote_count += 1;
        a_count = a_count + reveal(votum == Choice.a ? 1 : 0, organizer);
        b_count = b_count + reveal(votum == Choice.b ? 1 : 0, organizer);
        c_count = c_count + reveal(votum == Choice.c ? 1 : 0, organizer);
    }

    function publish_results() public {
        require(me == organizer);
        require(min_votes_reached());
        require(!is_result_published());
        packed_results = reveal((uint192(unhom(c_count)) << 128) | (uint192(unhom(b_count)) << 64) | uint192(unhom(a_count)), all);
    }

    // Queries

    function get_result_for(Choice option) public view returns(uint64) {
        require(is_result_published());
        uint64 res;
        if (option != Choice.none) {
            res = uint64(packed_results >> 64*(uint(option)-1));
        }
        return res;
    }

    function get_winning_choice() public view returns(Choice) {
        Choice c = Choice.none;
        uint votes = 0;
        for (uint i = uint(Choice.a); i <= uint(Choice.c); ++i) {
            uint res = get_result_for(Choice(i));
            if (res > votes) {
                c = Choice(i);
                votes = res;
            }
        }
        return c;
    }

    // Query with secret result
    function check_if_agree_with_majority() public view returns(bool@me) {
        Choice c = get_winning_choice();
        return c == current_votes[me];
    }

    function min_votes_reached() public view returns(bool) {
        return vote_count >= min_votes;
    }

    function is_result_published() public view returns(bool) {
        return packed_results != 0;
    }
}