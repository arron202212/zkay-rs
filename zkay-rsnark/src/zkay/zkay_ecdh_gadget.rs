#![allow(dead_code)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(nonstandard_style)]
//#![allow(unused_imports)]
#![allow(unused_mut)]
#![allow(unused_braces)]
#![allow(warnings, unused)]
use crate::{
    circuit::{
        InstanceOf,
        eval::{circuit_evaluator::CircuitEvaluator, instruction::Instruction},
        operations::{gadget::Gadget, gadget::GadgetConfig},
        structure::{
            circuit_generator::CGConfig, circuit_generator::CircuitGenerator,
            constant_wire::ConstantWire, wire::WireConfig, wire_type::WireType,
        },
    },
    zkay::{
        zkay_ec_gadget::AffinePoint, zkay_ec_gadget::ZkayEcGadget,
        zkay_sha256_gadget::ZkaySHA256Gadget,
    },
};

use rccell::RcCell;

use zkay_derive::ImplStructNameConfig;

//  * Shared key computation part of jsnark's ECDHKeyExchangeGadget

#[derive(Debug, Clone)]
pub struct ZkayECDHGadget {
    // The Affine point representation is used as it saves one gate per bit
    pub hPoint: AffinePoint, // H is the other party's pub  value
    // H = (other party's secret)* Base <- scalar EC
    // multiplication
    pub secretBits: Vec<Option<WireType>>, // the bits of the secret generated by this party
    // (follows little-endian order)

    // gadget output
    pub sharedSecret: Option<WireType>, // the x-coordinate of the derived key ((this
    // party's secret)*H).x
    pub hTable: Vec<AffinePoint>,
    pub outputs: Vec<Option<WireType>>,
}
impl ZkayECDHGadget {
    pub fn new(
        hX: WireType,
        secretKey: WireType,
        validateSecret: bool,
        desc: &Option<String>,
        generator: RcCell<CircuitGenerator>,
    ) -> Gadget<ZkayEcGadget<Self>> {
        let mut _self = ZkayEcGadget::<Self>::new(
            desc,
            Self {
                secretBits: secretKey
                    .getBitWiresi(Gadget::<ZkayEcGadget<Self>>::SECRET_BITWIDTH as u64, &None)
                    .asArray()
                    .clone(),
                hPoint: AffinePoint::new(Some(hX), None),
                sharedSecret: None,
                hTable: vec![],
                outputs: vec![],
            },
            generator.clone(),
        );

        if validateSecret {
            Gadget::<ZkayEcGadget<Self>>::checkSecretBits(&generator, &_self.t.t.secretBits);
        }
        _self.computeYCoordinates(); // For efficiency reasons, we rely on affine
        // coordinates
        _self.buildCircuit();
        _self
    }
}

impl Gadget<ZkayEcGadget<ZkayECDHGadget>> {
    pub fn buildCircuit(&mut self) {
        //The reason this operates on affine coordinates is that in our
        //setting, this's slightly cheaper than the formulas in
        //https://cr.yp.to/ecdh/curve25519-20060209.pdf. Concretely, the
        //following equations save 1 multiplication gate per bit. (we consider
        //multiplications by constants cheaper in our setting, so they are not
        //counted)

        let hTable = Gadget::<ZkayEcGadget<ZkayECDHGadget>>::preprocess(
            &self.t.t.hPoint,
            self.generator.clone(),
        );
        let sharedSecret = Gadget::<ZkayEcGadget<ZkayECDHGadget>>::mul(
            &self.t.t.hPoint,
            &self.t.t.secretBits,
            &hTable,
            self.generator.clone(),
        )
        .x
        .clone();
        let sharedKey = ZkaySHA256Gadget::new(
            vec![sharedSecret.clone()],
            128,
            &None,
            self.generator.clone(),
        )
        .getOutputWires()[0]
            .clone();
        self.t.t.outputs = vec![sharedKey];
        (self.t.t.hTable, self.t.t.sharedSecret) = (hTable, sharedSecret);
    }

    pub fn computeYCoordinates(&mut self) {
        // Easy to handle if hPoint is constant, otherwise, let the prover input
        // a witness and verify some properties
        // let generator = &self.generators;
        // let mut hPoint = self.t.t.hPoint;
        if self
            .t
            .t
            .hPoint
            .x
            .as_ref()
            .unwrap()
            .instance_of("ConstantWire")
        {
            let x = self
                .t
                .t
                .hPoint
                .x
                .as_ref()
                .unwrap()
                .try_as_constant_ref()
                .unwrap()
                .getConstant();
            self.t.t.hPoint.y = Some(CircuitGenerator::createConstantWire(
                self.generator.clone(),
                &Gadget::<ZkayEcGadget<ZkayECDHGadget>>::computeYCoordinate(x),
                &None,
            ));
            println!("====self.t.t.hPoint=============={:?}", self.t.t.hPoint);
        } else {
            self.t.t.hPoint.y = Some(CircuitGenerator::createProverWitnessWire(
                self.generator.clone(),
                &None,
            ));
            // CircuitGenerator::specifyProverWitnessComputation(generator.clone(), &|evaluator: &mut CircuitEvaluator| {
            //             let x = evaluator.getWireValue(hPoint.x);
            //             evaluator.setWireValue(hPoint.y, computeYCoordinate(x));
            //         });
            let hPoint = &self.t.t.hPoint;
            let prover = crate::impl_prover!(
                                        eval( hPoint: AffinePoint
                                )  {
                        impl Instruction for Prover{
                         fn evaluate(&self, evaluator: &mut CircuitEvaluator) ->eyre::Result<()>{
                                let x = evaluator.getWireValue(self.hPoint.x.as_ref().unwrap());
                                evaluator.setWireValue(self.hPoint.y.as_ref().unwrap(), &Gadget::<ZkayEcGadget::<ZkayECDHGadget>>::computeYCoordinate(x));
            Ok(())
                        }
                        }
                                    }
                                );
            CircuitGenerator::specifyProverWitnessComputation(self.generator.clone(), prover);
            // {
            //     struct Prover;
            //     impl Instruction for Prover {
            //         &|evaluator: &mut CircuitEvaluator| {
            //             let x = evaluator.getWireValue(hPoint.x);
            //             evaluator.setWireValue(hPoint.y, computeYCoordinate(x));
            //         }
            //     }
            //     Prover
            // });
            self.assertValidPointOnEC(
                self.t.t.hPoint.x.as_ref().unwrap(),
                self.t.t.hPoint.y.as_ref().unwrap(),
            );
        }
    }
    pub fn validateInputs(&self) {
        CircuitGenerator::addOneAssertion(
            self.generator.clone(),
            &self.t.t.hPoint.x.as_ref().unwrap().checkNonZero(&None),
            &None,
        );
        println!(
            "====self.t.t.hPoint====validateInputs======={}==={}",
            self.t.t.hPoint.x.as_ref().unwrap(),
            self.t.t.hPoint.y.as_ref().unwrap()
        );
        self.assertValidPointOnEC(
            self.t.t.hPoint.x.as_ref().unwrap(),
            self.t.t.hPoint.y.as_ref().unwrap(),
        );
        println!(
            "====self.t.t.hPoint====validateInputs======={}==={}",
            self.t.t.hPoint.x.as_ref().unwrap(),
            self.t.t.hPoint.y.as_ref().unwrap()
        );
        self.assertPointOrder(&self.t.t.hPoint, &self.t.t.hTable);
    }
}

impl GadgetConfig for Gadget<ZkayEcGadget<ZkayECDHGadget>> {
    fn getOutputWires(&self) -> &Vec<Option<WireType>> {
        &self.t.t.outputs
    }
}
