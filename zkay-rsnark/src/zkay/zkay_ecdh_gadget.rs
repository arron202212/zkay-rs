#![allow(dead_code)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(nonstandard_style)]
//#![allow(unused_imports)]
#![allow(unused_mut)]
#![allow(unused_braces)]
#![allow(warnings, unused)]
use crate::{
    circuit::{
        InstanceOf,
        eval::{circuit_evaluator::CircuitEvaluator, instruction::Instruction},
        operations::{gadget::Gadget, gadget::GadgetConfig},
        structure::{
            circuit_generator::CGConfig, circuit_generator::CircuitGenerator,
            constant_wire::ConstantWire, wire::WireConfig, wire_type::WireType,
        },
    },
    zkay::{
        zkay_ec_gadget::AffinePoint, zkay_ec_gadget::ZkayEcGadget,
        zkay_sha256_gadget::ZkaySHA256Gadget,
    },
};

use rccell::RcCell;

use zkay_derive::ImplStructNameConfig;

//  * Shared key computation part of jsnark's ECDHKeyExchangeGadget

#[derive(Debug, Clone)]
pub struct ZkayECDHGadget {
    // The Affine point representation is used as it saves one gate per bit
    pub h_point: AffinePoint, // H is the other party's pub  value
    // H = (other party's secret)* Base <- scalar EC
    // multiplication
    pub secret_bits: Vec<Option<WireType>>, // the bits of the secret generated by this party
    // (follows little-endian order)

    // gadget output
    pub shared_secret: Option<WireType>, // the x-coordinate of the derived key ((this
    // party's secret)*H).x
    pub h_table: Vec<AffinePoint>,
    pub outputs: Vec<Option<WireType>>,
}
impl ZkayECDHGadget {
    pub fn new(
        h_x: WireType,
        secret_key: WireType,
        validate_secret: bool,
        desc: &Option<String>,
        generator: RcCell<CircuitGenerator>,
    ) -> Gadget<ZkayEcGadget<Self>> {
        let mut _self = ZkayEcGadget::<Self>::new(
            desc,
            Self {
                secret_bits: secret_key
                    .get_bit_wiresi(Gadget::<ZkayEcGadget<Self>>::SECRET_BITWIDTH as u64, &None)
                    .as_array()
                    .clone(),
                h_point: AffinePoint::new(Some(h_x), None),
                shared_secret: None,
                h_table: vec![],
                outputs: vec![],
            },
            generator.clone(),
        );

        if validate_secret {
            Gadget::<ZkayEcGadget<Self>>::check_secret_bits(&generator, &_self.t.t.secret_bits);
        }
        _self.compute_y_coordinates(); // For efficiency reasons, we rely on affine
        // coordinates
        _self.build_circuit();
        _self
    }
}

impl Gadget<ZkayEcGadget<ZkayECDHGadget>> {
    pub fn build_circuit(&mut self) {
        //The reason this operates on affine coordinates is that in our
        //setting, this's slightly cheaper than the formulas in
        //https://cr.yp.to/ecdh/curve25519-20060209.pdf. Concretely, the
        //following equations save 1 multiplication gate per bit. (we consider
        //multiplications by constants cheaper in our setting, so they are not
        //counted)

        let h_table = Gadget::<ZkayEcGadget<ZkayECDHGadget>>::preprocess(
            &self.t.t.h_point,
            self.generator.clone(),
        );
        let shared_secret = Gadget::<ZkayEcGadget<ZkayECDHGadget>>::mul(
            &self.t.t.h_point,
            &self.t.t.secret_bits,
            &h_table,
            self.generator.clone(),
        )
        .x
        .clone();
        let shared_key = ZkaySHA256Gadget::new(
            vec![shared_secret.clone()],
            128,
            &None,
            self.generator.clone(),
        )
        .get_output_wires()[0]
            .clone();
        self.t.t.outputs = vec![shared_key];
        (self.t.t.h_table, self.t.t.shared_secret) = (h_table, shared_secret);
    }

    pub fn compute_y_coordinates(&mut self) {
        // Easy to handle if h_point is constant, otherwise, let the prover input
        // a witness and verify some properties
        // let generator = &self.generators;
        // let mut h_point = self.t.t.h_point;
        if self
            .t
            .t
            .h_point
            .x
            .as_ref()
            .unwrap()
            .instance_of("ConstantWire")
        {
            let x = self
                .t
                .t
                .h_point
                .x
                .as_ref()
                .unwrap()
                .try_as_constant_ref()
                .unwrap()
                .get_constant();
            self.t.t.h_point.y = Some(CircuitGenerator::create_constant_wire(
                self.generator.clone(),
                &Gadget::<ZkayEcGadget<ZkayECDHGadget>>::compute_y_coordinate(x),
                &None,
            ));
            println!("====self.t.t.h_point=============={:?}", self.t.t.h_point);
        } else {
            self.t.t.h_point.y = Some(CircuitGenerator::create_prover_witness_wire(
                self.generator.clone(),
                &None,
            ));
            // CircuitGenerator::specify_prover_witness_computation(generator.clone(), &|evaluator: &mut CircuitEvaluator| {
            //             let x = evaluator.get_wire_value(h_point.x);
            //             evaluator.set_wire_value(h_point.y, compute_y_coordinate(x));
            //         });
            let h_point = &self.t.t.h_point;
            let prover = crate::impl_prover!(
                                        eval( h_point: AffinePoint
                                )  {
                        impl Instruction for Prover{
                         fn evaluate(&self, evaluator: &mut CircuitEvaluator) ->eyre::Result<()>{
                                let x = evaluator.get_wire_value(self.h_point.x.as_ref().unwrap());
                                evaluator.set_wire_value(self.h_point.y.as_ref().unwrap(), &Gadget::<ZkayEcGadget::<ZkayECDHGadget>>::compute_y_coordinate(x));
            Ok(())
                        }
                        }
                                    }
                                );
            CircuitGenerator::specify_prover_witness_computation(self.generator.clone(), prover);
            // {
            //     struct Prover;
            //     impl Instruction for Prover {
            //         &|evaluator: &mut CircuitEvaluator| {
            //             let x = evaluator.get_wire_value(h_point.x);
            //             evaluator.set_wire_value(h_point.y, compute_y_coordinate(x));
            //         }
            //     }
            //     Prover
            // });
            self.assert_valid_point_on_ec(
                self.t.t.h_point.x.as_ref().unwrap(),
                self.t.t.h_point.y.as_ref().unwrap(),
            );
        }
    }
    pub fn validate_inputs(&self) {
        CircuitGenerator::add_one_assertion(
            self.generator.clone(),
            &self.t.t.h_point.x.as_ref().unwrap().check_non_zero(&None),
            &None,
        );
        println!(
            "====self.t.t.h_point====validate_inputs======={}==={}",
            self.t.t.h_point.x.as_ref().unwrap(),
            self.t.t.h_point.y.as_ref().unwrap()
        );
        self.assert_valid_point_on_ec(
            self.t.t.h_point.x.as_ref().unwrap(),
            self.t.t.h_point.y.as_ref().unwrap(),
        );
        println!(
            "====self.t.t.h_point====validate_inputs======={}==={}",
            self.t.t.h_point.x.as_ref().unwrap(),
            self.t.t.h_point.y.as_ref().unwrap()
        );
        self.assert_point_order(&self.t.t.h_point, &self.t.t.h_table);
    }
}

impl GadgetConfig for Gadget<ZkayEcGadget<ZkayECDHGadget>> {
    fn get_output_wires(&self) -> &Vec<Option<WireType>> {
        &self.t.t.outputs
    }
}
