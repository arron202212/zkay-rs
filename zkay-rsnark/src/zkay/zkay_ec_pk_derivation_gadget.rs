#![allow(dead_code)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(nonstandard_style)]
//#![allow(unused_imports)]
#![allow(unused_mut)]
#![allow(unused_braces)]
#![allow(warnings, unused)]

use crate::{
    circuit::{
        operations::gadget::{Gadget, GadgetConfig},
        structure::{
            circuit_generator::{CGConfig, CircuitGenerator},
            constant_wire::ConstantWire,
            wire::WireConfig,
            wire_type::WireType,
        },
    },
    zkay::{
        zkay_baby_jub_jub_gadget::JubJubPoint,
        zkay_ec_gadget::{AffinePoint, ZkayEcGadget},
    },
};

use rccell::RcCell;

//  * Pk derivation part of jsnark's ECDHKeyExchangeGadget

#[derive(Debug, Clone)]
pub struct ZkayEcPkDerivationGadget {
    // The Affine point representation is used as it saves one gate per bit
    pub base_point: AffinePoint, // The Base point both parties agree to

    pub secret_bits: Vec<Option<WireType>>, // the bits of the secret generated by this party
    // (follows little-endian order)

    // gadget output
    pub output_public_value: Option<WireType>, // the x-coordinate of the key exchange
    // material to be sent to the other party
    // output_public_value = ((this party's
    // secret)*Base).x
    pub outputs: Vec<Option<WireType>>,
}

impl ZkayEcPkDerivationGadget {
    pub fn new(
        secret_key: WireType,
        validate_secret: bool,
        desc: &Option<String>,
        generator: RcCell<CircuitGenerator>,
    ) -> Gadget<ZkayEcGadget<Self>> {
        let mut _self = ZkayEcGadget::<Self>::new(
            desc,
            Self {
                secret_bits: secret_key
                    .get_bit_wiresi(Gadget::<ZkayEcGadget<Self>>::SECRET_BITWIDTH as u64, &None)
                    .as_array()
                    .clone(),
                base_point: AffinePoint::new(
                    Some(CircuitGenerator::create_constant_wirei(
                        generator.clone(),
                        4,
                        &None,
                    )),
                    None,
                ),
                output_public_value: None,
                outputs: vec![],
            },
            generator,
        );

        // Hardcode base point
        if validate_secret {
            Gadget::<ZkayEcGadget<Self>>::check_secret_bits(
                &_self.generator,
                &_self.t.t.secret_bits,
            );
        }

        _self.compute_y_coordinates(); // For efficiency reasons, we rely on affine

        // coordinates
        _self.build_circuit();

        _self
    }
}
impl Gadget<ZkayEcGadget<ZkayEcPkDerivationGadget>> {
    fn build_circuit(&mut self) {
        let base_table = Gadget::<ZkayEcGadget<ZkayEcPkDerivationGadget>>::preprocess(
            &self.t.t.base_point,
            self.generator.clone(),
        );

        let output_public_value = Gadget::<ZkayEcGadget<ZkayEcPkDerivationGadget>>::mul(
            &self.t.t.base_point,
            &self.t.t.secret_bits,
            &base_table,
            self.generator.clone(),
        )
        .x
        .clone();

        self.t.t.outputs = vec![output_public_value.clone()];
        self.t.t.output_public_value = output_public_value;
    }

    fn compute_y_coordinates(&mut self) {
        let x = self
            .t
            .t
            .base_point
            .x
            .as_ref()
            .unwrap()
            .try_as_constant_ref()
            .unwrap()
            .get_constant();
        self.t.t.base_point.y = Some(CircuitGenerator::create_constant_wire(
            self.generator.clone(),
            &Gadget::<ZkayEcGadget<ZkayEcPkDerivationGadget>>::compute_y_coordinate(x),
            &None,
        ));
    }
}
impl GadgetConfig for Gadget<ZkayEcGadget<ZkayEcPkDerivationGadget>> {
    fn get_output_wires(&self) -> &Vec<Option<WireType>> {
        &self.t.t.outputs
    }
}
