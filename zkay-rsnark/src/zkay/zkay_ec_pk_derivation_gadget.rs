use circuit::structure::constant_wire;
use circuit::structure::wire;

/**
 * Pk derivation part of jsnark's ECDHKeyExchangeGadget
 */

pub struct ZkayEcPkDerivationGadget {
    // The Affine point representation is used as it saves one gate per bit
    basePoint: AffinePoint, // The Base point both parties agree to

    secretBits: Vec<Wire>, // the bits of the secret generated by this party
    // (follows little-endian order)

    // gadget output
    outputPublicValue: Wire, // the x-coordinate of the key exchange
                             // material to be sent to the other party
                             // outputPublicValue = ((this party's
                             // secret)*Base).x
}

impl ZkayEcPkDerivationGadget {
    pub fn new(secretKey: Wire, validateSecret: bool, desc: Vec<String>) -> Self {
        super(desc);
        self.secretBits = secretKey.getBitWires(SECRET_BITWIDTH).asArray();
        self.basePoint = AffinePoint::new(generator.createConstantWire(4)); // Hardcode base point
        if validateSecret {
            checkSecretBits(generator, secretBits);
        }
        computeYCoordinates(); // For efficiency reasons, we rely on affine
        // coordinates
        buildCircuit();
    }
}
impl ZkayEcGadget for ZkayEcPkDerivationGadget {
    fn buildCircuit() {
        let baseTable = preprocess(basePoint);
        outputPublicValue = mul(basePoint, secretBits, baseTable).x;
    }

    fn computeYCoordinates() {
        let x = (basePoint.x).getConstant();
        basePoint.y = generator.createConstantWire(computeYCoordinate(x));
    }

    pub fn getOutputWires() -> Vec<Wire> {
        return vec![outputPublicValue];
    }
}
