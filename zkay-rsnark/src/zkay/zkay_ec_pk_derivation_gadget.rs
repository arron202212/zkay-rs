#![allow(dead_code)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(nonstandard_style)]
#![allow(unused_imports)]
#![allow(unused_mut)]
#![allow(unused_braces)]
#![allow(warnings, unused)]
use crate::circuit::operations::gadget::Gadget;
use crate::circuit::operations::gadget::GadgetConfig;
use crate::circuit::structure::circuit_generator::CircuitGenerator;
use crate::circuit::structure::constant_wire::ConstantWire;
use crate::circuit::structure::wire_type::WireType;
use crate::zkay::zkay_baby_jub_jub_gadget::JubJubPoint;
use crate::zkay::zkay_ec_gadget::AffinePoint;
use crate::zkay::zkay_ec_gadget::ZkayEcGadget;
use rccell::RcCell;
/**
 * Pk derivation part of jsnark's ECDHKeyExchangeGadget
 */
#[derive(Debug, Clone)]
pub struct ZkayEcPkDerivationGadget {
    // The Affine point representation is used as it saves one gate per bit
    pub basePoint: AffinePoint, // The Base point both parties agree to

    pub secretBits: Vec<Option<WireType>>, // the bits of the secret generated by this party
    // (follows little-endian order)

    // gadget output
    pub outputPublicValue: Option<WireType>, // the x-coordinate of the key exchange
                                             // material to be sent to the other party
                                             // outputPublicValue = ((this party's
                                             // secret)*Base).x
}

impl ZkayEcPkDerivationGadget {
    pub fn new(
        secretKey: WireType,
        validateSecret: bool,
        desc: &Option<String>,
        generator: RcCell<CircuitGenerator>,
    ) -> Gadget<ZkayEcGadget<Self>> {
        let mut _self = ZkayEcGadget::<Self>::new(
            desc,
            Self {
                secretBits: secretKey
                    .getBitWires(ZkayEcGadget::<Self>::SECRET_BITWIDTH)
                    .asArray(),
                basePoint: AffinePoint::new(generator.createConstantWire(4)),
                outputPublicValue: None,
            },
            generator,
        );
        // Hardcode base point
        if validateSecret {
            _self.checkSecretBits(generator, &_self.secretBits);
        }
        _self.computeYCoordinates(); // For efficiency reasons, we rely on affine
        // coordinates
        _self.buildCircuit();
        _self
    }
}
impl Gadget<ZkayEcGadget<ZkayEcPkDerivationGadget>> {
    fn buildCircuit(&mut self) {
        let baseTable = self.preprocess(&self.t.t.basePoint);
        let outputPublicValue = self
            .mul(&self.t.t.basePoint, &self.t.t.secretBits, baseTable)
            .x;
        self.t.t.outputs = vec![outputPublicValue.clone()];
        self.t.t.outputPublicValue = Some(outputPublicValue);
    }

    fn computeYCoordinates(&mut self) {
        let x = self.t.t.basePoint.x.getConstant();
        self.t.t.basePoint.y = self
            .generator
            .createConstantWire(ZkayEcGadget::<ZkayEcPkDerivationGadget>::computeYCoordinate(x));
    }
}
impl GadgetConfig for Gadget<ZkayEcGadget<ZkayEcPkDerivationGadget>> {
    fn getOutputWires(&self) -> &Vec<Option<WireType>> {
        &self.t.t.outputs
    }
}
